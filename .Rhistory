all_aucs <- list()
par(mfrow = c(2, 3))
for (i in 1:6){
all_aucs[[i]] <- rocplot(prob_list[[i]], Dependent[test_index], i)
abline(abline(coef = c(0,1)))
}
source("ROC 6 Best Predictors.R")
all_aucs <- list()
par(mfrow = c(2, 3))
for (i in 1:6){
all_aucs[[i]] <- rocplot(prob_list[[i]], Dependent[test_index], i)
abline(abline(coef = c(0,1)))
}
source("ROC 6 Best Predictors.R")
all_aucs <- list()
par(mfrow = c(2, 3))
for (i in 1:6){
all_aucs[[i]] <- rocplot(prob_list[[i]], Dependent[test_index], i)
abline(abline(coef = c(0,1)))
}
par(mfrow = c(2, 3))
# Apriori is no longer subsettable to a list. Possible update issue. Worked initially
plot(apriori1, method = "graph", main = "")
plot(apriori2, method = "graph", main = "")
plot(apriori3, method = "graph", main = "")
plot(apriori4, method = "graph", main = "")
plot(apriori5, method = "graph", main = "")
par(mfrow = c(2, 3))
# Apriori is no longer subsettable to a list. Possible update issue. Worked initially
plot(apriori1, method = "graph", main = "")
plot(apriori2, method = "graph", main = "")
plot(apriori3, method = "graph", main = "")
plot(apriori4, method = "graph", main = "")
plot(apriori5, method = "graph", main = "")
evalPred()
library(rrecsys)
install.packages("rrecsys")
library(rrecsys)
evalPred()
?evalPred()
?evalPred()
library(rrecsys)
?evalPred()
?rrecsys()
library(readxl)
library(dplyr)
# ensure files are stored in the working directory
setwd("C:/Users/jaybl/Google DriveBroncos)
getwd()
# ensure files are stored in the working directory
setwd("C:/Users/jaybl/Google DriveBroncos")
install.packages("blogdown")
install.packages("Rtools")
2+2
7*18
7*20
18*.7
18*.7*7
x <- 3
x + 5
library(plotly)
quakes = read.csv('https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv')
p <- quakes %>%
plot_ly(
type = 'densitymapbox',
lat = ~Latitude,
lon = ~Longitude,
coloraxis = 'coloraxis',
radius = 10) %>%
layout(
mapbox = list(
style="stamen-terrain",
center= list(lon=180)), coloraxis = list(colorscale = "Viridis"))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="density-with-token")
chart_link
p
library(readxl)
library(dplyr)
library(stringr)
# # Load Data ---------------------------------------------------------------------------------
var_types <- c("date", "text", "numeric", "text", "numeric", "text", "numeric", "date")
nhlMatches <- read_excel("NHL Match Data 2014 to Early 2019 Regular Seasons Only.xlsx",
sheet = 1,
col_types = var_types)
summary(nhlMatches) # LOG has about 20% missing values
glimpse(nhlMatches)
nhlMatches2 <- nhlMatches %>%
mutate(Visitor = as.factor(Visitor)) %>%
mutate(Home = as.factor(Home))
glimpse(nhlMatches2)
# check levels
(visitors <- levels(nhlMatches2$Visitor))
(home <- levels(nhlMatches2$Home))
levels(nhlMatches2$ExtraTime)
# check all visitors and home are equal
sum(visitors %in% home)
sum(home %in% visitors)
sum(home == visitors)
# imput missing values in 'ExtraTime' to be normal time match
nhlMatches2$`Extra Time`[is.na(nhlMatches2$`Extra Time`)] <- "Normal"
# change it to a facotr
nhlMatches3 <- nhlMatches2 %>%
mutate(ExtraTime = as.factor(`Extra Time`)) %>%
select(-c("LOG", `Extra Time`))
glimpse(nhlMatches3)
levels(nhlMatches3$ExtraTime)
# create the goal difference variable
nhlMatches3$goal_difference <- nhlMatches3$G...5 - nhlMatches3$G...3
# check the dispersion of results
table(nhlMatches3$goal_difference)
hist(nhlMatches3$goal_difference)
# create match outcome label BASED ON HOME TEAM
nhlMatches3$outcome <- ifelse(nhlMatches3$goal_difference > 0, "Win", "Loss")
# inspect the distribution of home wins vs visitor wins
table(nhlMatches3$outcome)
# there are more home wins than losses by approximately 600 games
sum(nhlMatches3$outcome == "Win")/nrow(nhlMatches3) # 54.6% home wins.
nhlMatches <- read_excel("NHL Match Data 2014 to Early 2019 Regular Seasons Only.xlsx",
sheet = 1,
col_types = var_types)
x <- 49+49+1+1
y <- 50000000 * x
z <- 14.28 + 16.609 + 7 + +
z <- 14.28 + 16.609 + 7 + 1
z <- 14.28 + 16.609 + 7 + 1
50000000 * z
a <- 50000000 * z
x/a
# set working directory
getwd()
setwd("C:/Users/jaybl/OneDrive/DS Projects/NHL_Prediction_With_Pre_Match_data/")
getwd()
source("FUNCTION_download_html_data")
source("FUNCTION_download_html_data.R")
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
existing_scores <- read.csv("Existing_nhl_scores.csv")
library(readxl)
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
max_date <- max(existing_scores$Date)
names(new_scores)
new_scores <- new_scores %>%
filter(Date > max_date)
names(existing_scores)
new_scores <- new_scores %>%
filter(Date > max_date) %>%
select(1:8)
glimpse(new_scores)
glimpse(existing_scores)
new_scores <- new_scores %>%
filter(Date > max_date) %>%
select(1:8) %>%
mutate(Date = as.Date(Date))
glimpse(new_scores)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
max_date <- max(existing_scores$Date)
min_date <- min(new_scores$Date)
# download data from website
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
max_date <- max(existing_scores$Date)
min_date <- min(new_scores$Date)
glimpse(new_scores)
new_scores <- new_scores %>%
mutate(Date = as.Date(Date))
min_date <- min(new_scores$Date)
new_scores <- new_scores %>%
mutate(Date = as.Date(Date)) %>%
filter(Date > max_date) %>%
select(1:7) %>%
glimpse(new_scores)
new_scores <- new_scores %>%
mutate(Date = as.Date(Date)) %>%
filter(Date > max_date) %>%
select(1:7) %>%
glimpse(new_scores)
new_scores <- new_scores %>%
mutate(Date = as.Date(Date)) %>%
filter(Date > max_date) %>%
select(1:7)
glimpse(new_scores)
new_scores <- download_html_data(website)
new_scores <- new_scores %>%
mutate(Date = as.Date(Date))
glimpse(new_scores)
min_date <- min(new_scores$Date)
class(in_date)
class(min_date)
class(max_date)
library(lubridate)
new_scores <- new_scores %>%
mutate(Date = ymd(Date))
min_date <- min(new_scores$Date)
class(min_date)
class(max_date)
new_scores <- new_scores %>%
mutate(Date = ymd(Date)) %>%
filter(Date > max_date) %>%
select(1:7)
class(min_date)
min_date <- min(new_scores$Date)
glimpse(new_scores)
glimpse(existing_scores)
new_scores <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = as.double(Att.)) %>%
filter(Date > max_date) %>%
select(1:7)
glimpse(new_scores)
new_scores <- download_html_data(website)
new_scores <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
select(1:7)
new_scores <- download_html_data(website)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
max_date <- max(existing_scores$Date)
rm(min_date)
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
select(1:7)
glimpse(new_scores)
glimpse(new_scores)
new_scores <- download_html_data(website)
glimpse(new_scores)
glimpse(new_scores_formatted)
glimpse(existing_scores)
View(new_scores)
mutate(Att. = str_remove(Att., ',') %>%
new_scores_formatted <- new_scores %>%
new_scores <- download_html_data(website)
# load libraries
library(readxl)
library(lubridate)
library(stringr)
# load functions
source("FUNCTION_download_html_data.R")
# download data from website
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
max_date <- max(existing_scores$Date)
# names(new_scores)
new_scores_formatted <- new_scores %>%
new_scores_formatted <- new_scores %>%
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',') %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
select(1:7)
mutate(Att. = str_remove(Att., ',')
new_scores_formatted <- new_scores %>%
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
#mutate(Att. = str_remove(Att., ',')
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
select(1:7)
new_scores_formatted <- new_scores %>%
str_remove(new_scores$Att., ",")
str_remove(new_scores$Att., ",")
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
select(1:7)
glimpse(new_scores_formatted)
glimpse(new_scores)
glimpse(existing_scores)
new_scores_formatted$...6[" "] <- NA
new_scores_formatted$...6[""] <- NA
new_scores_formatted[...6 == ""] <- NA
new_scores_formatted[new_scores_formatted$...6 == ""] <- NA
new_scores_formatted[new_scores_formatted$...6 == """"] <- NA
mutate(...6 = ifelse(...6 == "", NA, ...6) %>%
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
mutate(...6 = ifelse(...6 == "", NA, ...6)) %>%
filter(Date > max_date) %>%
select(1:7)
glimpse(new_scores_formatted)
glimpse(new_scores_formatted)
names(new_scores_formatted <- names(existing_scores)
glimpse(new_scores_formatted)
glimpse(new_scores_formatted)
names(new_scores_formatted) <- names(existing_scores)
glimpse(new_scores_formatted)
new_scores_formatted[new_scores_formatted$`Extra Time` == ""] <- NA
table(new_scores_formatted$`Extra Time`)
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
select(1:7) %>%
mutate_all(list(~na_if(.,"")))
updated_scores <- rbind(existing_scores, new_scores_formatted)
glimpse(updated_scores)
class(updated_scores)
table(updated_scores$`Extra Time`)
x <- new_scores_formatted %>% mutate_all(na_if,"")
x <- new_scores_formatted %>% mutate_all(na_if, " ")
x <- new_scores_formatted %>% mutate_all(na_if, "")
View(new_scores)
x <- new_scores_formatted
x[x==""]<-NA
x[x$`Extra Time`==""]<-NA
if (x$`Extra Time` !%in% c('OT', "SO")) {
x$`Extra Time` = NA
}
v <- c("OT", "SO")
if (x$`Extra Time` !%in% v {
if (x$`Extra Time` !(%in%) v {
if (!(x > 0)) {print ("not bigger than zero")}
'%ni%' <- Negate('%in%')
v <- c("OT", "SO")
if (x$`Extra Time` %ni% v {
if (x$`Extra Time` %ni% v) {
x$`Extra Time` = NA
}
x
table(x$`Extra Time`
table(x$`Extra Time`)
table(x$`Extra Time`)
ifelse(x$`Extra Time` %in% v, x$`Extra Time`, NA)
table(ifelse(x$`Extra Time` %in% v, x$`Extra Time`, NA))
table(existing_scores)
table(existing_scores$`Extra Time`)
x <- new_scores_formatted
ifelse(x$`Extra Time` %in% v, x$`Extra Time`, NA)
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
names(new_scores_formatted) <- names(existing_scores)
new_scores_formatted$`Extra Time`
table(new_scores_formatted$`Extra Time`)
# add to existing data
updated_scores <- rbind(existing_scores, new_scores_formatted)
# write
table(updated_scores$`Extra Time`)
write.xlsx(new_scores_formatted, "Existing_nhl_scores.xlsx", sheetName = "Sheet1", append = TRUE)
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(new_scores_formatted, "Existing_nhl_scores.xlsx", sheetName = "Sheet1", append = TRUE)
write.xlsx2(new_scores_formatted, "Existing_nhl_scores.xlsx", sheetName = "Sheet1", append = TRUE)
library(xlsx)
library(xlsx)
library(xlsx2)
library(xlsx)
library(XLConnect)
install.packages("XLConnect")
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
library(XLConnect)
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
library(XLConnect)
require(XLConnect)
library(XLConnect)
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
existing_scores <- readWorksheet(wb, sheet = "Sheet1", header = TRUE)
existing_scores <- readWorksheet(wb, sheet = 1, header = TRUE)
existing_scores2 <- readWorksheet(wb, sheet = 1, header = TRUE)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
# load libraries
library(readxl)
library(lubridate)
library(stringr)
# load existing data
existing_scores <- read_excel("Existing_nhl_scores.xlsx", sheet = 1)
# connect to excel workbook and load existing scores
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
existing_scores2 <- readWorksheet(wb, sheet = 1, header = TRUE)
# load functions
source("FUNCTION_download_html_data.R")
# download data from website
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
max_date <- max(existing_scores$Date) # get latest existing match date
existing_scores <- readWorksheet(wb, sheet = 1, header = TRUE)
rm(existing_scores2)
max_date <- max(existing_scores$Date) # get latest existing match date
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
names(new_scores_formatted) <- names(existing_scores)
View(existing_scores)
View(new_scores)
View(new_scores_formatted)
# add to existing data
existing_scores <- exising_scores %>% rbind(new_scores_formatted)
# add to existing data
existing_scores <- existing_scores %>% rbind(new_scores_formatted)
existing_scores2 <- readWorksheet(wb, sheet = 1, header = TRUE)
appendWorksheet(wb, new_scores_formatted, existing_scores, header = FALSE ,rownames = FALSE)
appendWorksheet(wb, new_scores_formatted, sheet = 1)
appendWorksheet(wb, new_scores_formatted, sheet = 1)
saveWorkbook(wb)
appendWorksheet(wb, new_scores_formatted, sheet = 1)
saveWorkbook(wb)
2+2
# set working directory
getwd()
setwd("C:/Users/jaybl/OneDrive/DS Projects/NHL_Prediction_With_Pre_Match_data/")
getwd()
# load libraries
library(lubridate)
library(stringr)
library(XLConnect)
# connect to excel workbook and load existing scores
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
# connect to excel workbook and load existing scores
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
existing_scores <- readWorksheet(wb, sheet = 1, header = TRUE)
# load functions
source("FUNCTION_download_html_data.R")
# download data from website
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
max_date <- max(existing_scores$Date) # get latest existing match date
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
names(new_scores_formatted) <- names(existing_scores)
# write new data to excel sheet
appendWorksheet(wb, new_scores_formatted, sheet = 1)
saveWorkbook(wb)
View(new_scores_formatted)
View(new_scores)
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
filter(!is.na(new_scores$G...3)) %>%
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
filter(!is.na(new_scores$G...3)) %>%
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
filter(!is.na(G...3)) %>%
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
# download data from website
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
# load libraries
library(lubridate)
library(stringr)
library(XLConnect)
# connect to excel workbook and load existing scores
wb <- loadWorkbook("Existing_nhl_scores.xlsx")
existing_scores <- readWorksheet(wb, sheet = 1, header = TRUE)
# load functions
source("FUNCTION_download_html_data.R")
# download data from website
website <- "https://www.hockey-reference.com/leagues/NHL_2020_games.html"
new_scores <- download_html_data(website)
max_date <- max(existing_scores$Date) # get latest existing match date
# transform new data
new_scores_formatted <- new_scores %>%
mutate(Date = ymd(Date)) %>%
mutate(Att. = str_remove(Att., ',')) %>%
mutate(Att. = as.numeric(Att.)) %>%
filter(Date > max_date) %>%
filter(!is.na(G...3)) %>% # do not include games that have not been played yet
mutate(...6 = ifelse(...6 %in% c("OT", "SO"), ...6 , NA)) %>%
select(1:7)
